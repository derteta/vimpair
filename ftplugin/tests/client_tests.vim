python from mock import Mock
python import vim
execute("source " . expand("<sfile>:p:h") . "/test_tools.vim")
execute("source " . expand("<sfile>:p:h") . "/../vimpair.vim")


function! _VPClientTest_set_up()
  execute("vnew")
  python fake_socket = Mock()
  python client_socket_factory = lambda: fake_socket
  call VimpairClientStart()
endfunction

function! _VPClientTest_tear_down()
  call VimpairClientStop()
  execute("q!")
endfunction

function! _VPClientTest_assert_buffer_has_contents(expected)
python << EOF
actual = list(vim.current.buffer)
expected = list(vim.eval('a:expected'))
assert actual == expected, actual
EOF
endfunction

function! _VPClientTest_assert_has_sent_message(expected)
  python fake_socket.sendall.assert_any_call(
    \ vim.eval('a:expected'))
endfunction

function! _VPClientTest_wait_for_timer()
  sleep 300m
endfunction


function! VPClientTest_applies_received_contents_updates()
  python received_messages = ["VIMPAIR_FULL_UPDATE|16|This is line one"]
  python fake_socket.recv = lambda *a: received_messages.pop()

  call _VPClientTest_wait_for_timer()

  call _VPClientTest_assert_buffer_has_contents(["This is line one"])
endfunction

function! VPClientTest_received_contents_updates_overwrite_existing_contents()
  execute("normal i1")
  execute("normal o2")
  python received_messages = ["VIMPAIR_FULL_UPDATE|16|This is line one"]
  python fake_socket.recv = lambda *a: received_messages.pop()

  call _VPClientTest_wait_for_timer()

  call _VPClientTest_assert_buffer_has_contents(["This is line one"])
endfunction

function! VPClientTest_received_cursor_position_is_applied()
  execute("normal iThis is line one")
  execute("normal oThis is line two")
  python received_messages = ["VIMPAIR_CURSOR_POSITION|0|8"]
  python fake_socket.recv = lambda *a: received_messages.pop()

  call _VPClientTest_wait_for_timer()

  python assert vim.current.window.cursor == (1, 8)
endfunction

function! VPClientTest_applies_large_contents_received_in_multiple_messages()
python << EOF
received_messages = [
  "VIMPAIR_CONTENTS_END|25|5678901234567890123456789",
  "VIMPAIR_CONTENTS_PART|998|789012345678901234567890123456789012345678901"
  + "234567890123456789012345678901234567890123456789012345678901234567890"
  + "123456789012345678901234567890123456789012345678901234567890123456789"
  + "012345678901234567890123456789012345678901234567890123456789012345678"
  + "901234567890123456789012345678901234567890123456789012345678901234567"
  + "890123456789012345678901234567890123456789012345678901234567890123456"
  + "789012345678901234567890123456789012345678901234567890123456789012345"
  + "678901234567890123456789012345678901234567890123456789012345678901234"
  + "567890123456789012345678901234567890123456789012345678901234567890123"
  + "456789012345678901234567890123456789012345678901234567890123456789012"
  + "345678901234567890123456789012345678901234567890123456789012345678901"
  + "234567890123456789012345678901234567890123456789012345678901234567890"
  + "123456789012345678901234567890123456789012345678901234567890123456789"
  + "012345678901234567890123456789012345678901234567890123456789012345678"
  + "90123456789012345678901234567890123456789012345678901234",
  "VIMPAIR_CONTENTS_START|997|01234567890123456789012345678901234567890123"
  + "456789012345678901234567890123456789012345678901234567890123456789012"
  + "345678901234567890123456789012345678901234567890123456789012345678901"
  + "234567890123456789012345678901234567890123456789012345678901234567890"
  + "123456789012345678901234567890123456789012345678901234567890123456789"
  + "012345678901234567890123456789012345678901234567890123456789012345678"
  + "901234567890123456789012345678901234567890123456789012345678901234567"
  + "890123456789012345678901234567890123456789012345678901234567890123456"
  + "789012345678901234567890123456789012345678901234567890123456789012345"
  + "678901234567890123456789012345678901234567890123456789012345678901234"
  + "567890123456789012345678901234567890123456789012345678901234567890123"
  + "456789012345678901234567890123456789012345678901234567890123456789012"
  + "345678901234567890123456789012345678901234567890123456789012345678901"
  + "234567890123456789012345678901234567890123456789012345678901234567890"
  + "12345678901234567890123456789012345678901234567890123456",
]
fake_socket.recv = lambda *a: received_messages.pop()
EOF

  call _VPClientTest_wait_for_timer()

  call _VPClientTest_assert_buffer_has_contents([
    \ "01234567890123456789012345678901234567890123456789012345678901234567" .
    \ "89012345678901234567890123456789012345678901234567890123456789012345" .
    \ "67890123456789012345678901234567890123456789012345678901234567890123" .
    \ "45678901234567890123456789012345678901234567890123456789012345678901" .
    \ "23456789012345678901234567890123456789012345678901234567890123456789" .
    \ "01234567890123456789012345678901234567890123456789012345678901234567" .
    \ "89012345678901234567890123456789012345678901234567890123456789012345" .
    \ "67890123456789012345678901234567890123456789012345678901234567890123" .
    \ "45678901234567890123456789012345678901234567890123456789012345678901" .
    \ "23456789012345678901234567890123456789012345678901234567890123456789" .
    \ "01234567890123456789012345678901234567890123456789012345678901234567" .
    \ "89012345678901234567890123456789012345678901234567890123456789012345" .
    \ "67890123456789012345678901234567890123456789012345678901234567890123" .
    \ "45678901234567890123456789012345678901234567890123456789012345678901" .
    \ "23456789012345678901234567890123456789012345678901234567890123456789" .
    \ "01234567890123456789012345678901234567890123456789012345678901234567" .
    \ "89012345678901234567890123456789012345678901234567890123456789012345" .
    \ "67890123456789012345678901234567890123456789012345678901234567890123" .
    \ "45678901234567890123456789012345678901234567890123456789012345678901" .
    \ "23456789012345678901234567890123456789012345678901234567890123456789" .
    \ "01234567890123456789012345678901234567890123456789012345678901234567" .
    \ "89012345678901234567890123456789012345678901234567890123456789012345" .
    \ "67890123456789012345678901234567890123456789012345678901234567890123" .
    \ "45678901234567890123456789012345678901234567890123456789012345678901" .
    \ "23456789012345678901234567890123456789012345678901234567890123456789" .
    \ "01234567890123456789012345678901234567890123456789012345678901234567" .
    \ "89012345678901234567890123456789012345678901234567890123456789012345" .
    \ "67890123456789012345678901234567890123456789012345678901234567890123" .
    \ "45678901234567890123456789012345678901234567890123456789012345678901" .
    \ "234567890123456789012345678901234567890123456789"])
endfunction

function! VPClientTest_send_buffer_contents_after_taking_control()
  python received_messages = ["VIMPAIR_TAKE_CONTROL"]
  python fake_socket.recv = lambda *a: received_messages.pop()
  call _VPClientTest_wait_for_timer()

  execute("normal iThis is just some text")

  call _VPClientTest_assert_has_sent_message(
    \ "VIMPAIR_FULL_UPDATE|22|This is just some text")
endfunction

function! VPClientTest_send_cursor_position_after_taking_control()
  python received_messages = ["VIMPAIR_TAKE_CONTROL"]
  python fake_socket.recv = lambda *a: received_messages.pop()
  call _VPClientTest_wait_for_timer()

  execute("normal iThis is line one")
  execute("normal oThis is line two")

  execute("normal gg0ww")
  " The CursorMoved autocommand is not reported in this scope,
  " so we need to manually trigger it
  execute("doautocmd CursorMoved")

  call _VPClientTest_assert_has_sent_message("VIMPAIR_CURSOR_POSITION|0|8")
endfunction

function! VPClientTest_doesnt_apply_received_contents_updates_after_taking_control()
  python received_messages = ["VIMPAIR_TAKE_CONTROL"]
  python fake_socket.recv = lambda *a: received_messages.pop()
  call _VPClientTest_wait_for_timer()

  python received_messages = ["VIMPAIR_FULL_UPDATE|16|This is line one"]
  python fake_socket.recv = lambda *a: received_messages.pop()
  call _VPClientTest_wait_for_timer()

  call _VPClientTest_assert_buffer_has_contents([""])
endfunction


call VPTestTools_run_tests("VPClientTest")
